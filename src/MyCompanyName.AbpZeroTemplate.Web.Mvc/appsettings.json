{
  "ConnectionStrings": {
    "Default": "Server=.; Database=AbpZeroTemplateDb103;User=sa;Password=Abc12#$"
  },
  "AbpZeroLicenseCode": "LicenseCodePlaceHolderToReplace",
  "Abp": {
    "RedisCache": {
      "ConnectionString": "localhost",
      "DatabaseId": -1
    }
  },
  "App": {
    "WebSiteRootAddress": "http://localhost:44302/",
    "RedirectAllowedExternalWebSites": "http://localhost:44303/",
    "SwaggerEndPoint": "/swagger/v1/swagger.json"
  },
  "Authentication": {
    "AllowSocialLoginSettingsPerTenant": false,
    "Facebook": {
      "IsEnabled": "false",
      "AppId": "",
      "AppSecret": ""
    },
    "Google": {
      "IsEnabled": "false",
      "ClientId": "",
      "ClientSecret": "",
      "UserInfoEndpoint": "https://www.googleapis.com/oauth2/v2/userinfo"
    },
    "Twitter": {
      "IsEnabled": "false",
      "ConsumerKey": "",
      "ConsumerSecret": ""
    },
    "Microsoft": {
      "IsEnabled": "false",
      "ConsumerKey": "",
      "ConsumerSecret": ""
    },
    "WsFederation": {
      "IsEnabled": "false",
      "MetaDataAddress": "",
      "Wtrealm": ""
    },
    "JwtBearer": {
      "IsEnabled": "true",
      "SecurityKey": "AbpZeroTemplate_8CFB2EC534E14D56",
      "Issuer": "AbpZeroTemplate",
      "Audience": "AbpZeroTemplate"
    },
    "OpenId": {
      "IsEnabled": "false",
      "Authority": "",
      "ClientId": "",
      "ClientSecret": "",
      "ValidateIssuer": "true",
      "ClaimsMapping": [
        {
          "claim": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier",
          "key": "http://schemas.microsoft.com/identity/claims/objectidentifier"
        }
      ]
    }
  },
  "Configuration": {
    "AzureKeyVault": {
      "IsEnabled": "false",
      "KeyVaultName": "",
      "AzureADApplicationId": "",
      "AzureADCertThumbprint": "",
      "ClientId": "",
      "ClientSecret": ""
    }
  },
  "Twilio": {
    "AccountSid": "",
    "AuthToken": "",
    "SenderNumber": ""
  },
  "Recaptcha": {
    "SiteKey": "6LeEZ-kUAAAAAGdgiM9BoWiRKBZOeULch73OlyZP",
    "SecretKey": "6LeEZ-kUAAAAADBrLM1zkIy0mF_4rbBp3toA6zIJ"
  },
  "IdentityServer": {
    "IsEnabled": "true",
    "Authority": "http://localhost:44302/",
    "ApiName": "default-api",
    "ApiSecret": "secret",
    "Clients": [
      {
        "ClientId": "client",
        "AllowedGrantTypes": [
          "password"
        ],
        "ClientSecrets": [
          {
            "Value": "def2edf7-5d42-4edc-a84a-30136c340e13"
          }
        ],
        "AllowedScopes": [
          "default-api"
        ]
      },
      {
        "ClientId": "demo",
        "ClientName": "MVC Client Demo",
        "AllowedGrantTypes": [
          "hybrid"
        ],
        "RequireConsent": "true",
        "ClientSecrets": [
          {
            "Value": "def2edf7-5d42-4edc-a84a-30136c340e13"
          }
        ],
        "RedirectUris": [
          "http://openidclientdemo.com:8001/signin-oidc"
        ],
        "PostLogoutRedirectUris": [
          "http://openidclientdemo.com:8001/signout-callback-oidc"
        ],
        "AllowedScopes": [
          "openid",
          "profile",
          "email",
          "phone",
          "default-api"
        ],
        "AllowOfflineAccess": "true"
      }
    ]
  },
  "Payment": {
    "PayPal": {
      "IsActive": "true",
      "Environment": "sandbox",
      "ClientId": "",
      "ClientSecret": "",
      "DemoUsername": "",
      "DemoPassword": ""
    },
    "Stripe": {
      "IsActive": "true",
      "BaseUrl": "https://api.stripe.com/v1",
      "SecretKey": "",
      "PublishableKey": "",
      "WebhookSecret": "",
      "PaymentMethodTypes": [ "card" ]
    }
  },
  "HealthChecks": {
    "HealthChecksEnabled": true,
    "HealthChecksUI": {
      "HealthChecksUIEnabled": true,
      "HealthChecks": [
        {
          "Name": "MyCompanyName.AbpZeroTemplate.Web.MVC",
          "Uri": "http://localhost:44302/health"
        }
      ],
      "EvaluationTimeOnSeconds": 10,
      "MinimumSecondsBetweenFailureNotifications": 60
    }
  },
  "KestrelServer": {
    //  datdd "IsEnabled": true
    "IsEnabled": true
  },
  "LocaleMappings": {
    "Moment": [
      {
        "from": "zh-Hans",
        "to": "zh-cn"
      }
    ]
  },
  //	datdd edited
  "Kestrel": {
    "Endpoints": {
      "Http": {
        "Url": "http://localhost:5000"
      },
      "Https": {
        "Url": "https://localhost:5001",
        "Certificate": {
          "Path": "<path to .pfx file>",
          "Password": "<certificate password>"
        }
      }
    }
  },

  //Dapper Plus - SQL Server
  //DELTAFOX
  //2/22/2022
  //394;701-DELTAFOX
  //2720572-259B2AD-6F9B4EF-F856FF6-F1D4

  //Dapper Plus - Bundle
  //DELTAFOX
  //2/22/2022
  //712;700-DELTAFOX
  //E11E212-2332212-B32312A-948B3E9-090A

  // using Z.Dapper.Plus; // Don't forget to include this.

  //string licenseName = //... PRO license name
  //string licenseKey = //... PRO license key

  //DapperPlusManager.AddLicense(licenseName, licenseKey);

  //// CHECK if the license is valid for the default provider (SQL Server)
  //"string" "licenseErrorMessage;",
  //"if" "(!Z.Dapper.Plus.DapperPlusManager.ValidateLicense(out",
  //"licenseErrorMessage))" {
  //  "throw" "new",
  //  "Exception(licenseErrorMessage);"
  //},

  //// CHECK if the license is valid for a specific provider
  //"string" "licenseErrorMessage;",
  //"if" "(!Z.Dapper.Plus.DapperPlusManager.ValidateLicense(out",
  //"licenseErrorMessage",
  //"DapperProviderType.SqlServer))" {
  //  "throw" "new",
  //  "Exception(licenseErrorMessage);"
  //},

  "Z.Dapper.Plus": {
    "LicenseName": "[394;701-DELTAFOX]",
    "LicenseKey": "[2720572-259B2AD-6F9B4EF-F856FF6-F1D4]"
  },

  //.NET EF Extensions - SQL Server
  //DELTAFOX
  //2/22/2022
  //242;101-DELTAFOX
  //2E2BEB0-1151232-A2017E1-1C1A2BC-81A3

  //.NET EF Extensions - Bundle
  //DELTAFOX
  //2/22/2022
  //561;100-DELTAFOX
  //2277712-217FACD-77FA90E-7F67719-54F3

  //Z.EntityFramework.Extensions.LicenseManager.AddLicense([licenseName], [licenseKey]);

  //// CHECK if the license is valid for a specific provider
  //"string" "licenseErrorMessage;",
  //"if" "(!Z.EntityFramework.Extensions.LicenseManager.ValidateLicense(out",
  //"licenseErrorMessage",
  //"ProviderType.SqlServer))" {
  //  "throw" "new",
  //  "Exception(licenseErrorMessage);"

  "Z.EntityFramework.Extensions": {
    "LicenseName": "[394;701-DELTAFOX]",
    "LicenseKey": "[2720572-259B2AD-6F9B4EF-F856FF6-F1D4]"
  }
}